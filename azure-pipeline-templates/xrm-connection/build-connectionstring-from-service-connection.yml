# Create a connectionstring from an existing service connection
#
# While the service connection does have a default url this cannot be exposed and needs to be set manually if the connection
#   details are used outside of the predefined tasks. It will take the url by default from $(BuildTools.EnvironmentUrl).
#
# This template will take the environment url from the following sources in order:
#   1. The parameter url
#   3. The variable $(BuildTools.EnvironmentUrl)
#   2. The variable $(PowerPlatformUrl)
#
# => The result will be written to $(BuildTools.EnvironmentUrl) so that it can be reused by the power platform tasks

parameters:
  # ----- Required parameters ----- 

  # Name of service connection
  - name: serviceConnection
    displayName: Service connection
    type: string

  # ----- Optional predefined connection parameters -----

  - name: url
    displayName: Resource URL to connect to
    type: string
    default: ''

  # ----- Optional feature parameters -----

  # Set name of variable to store connection string in
  - name: outputVariableName
    displayName: Name of output variable
    type: string
    default: PowerPlatformConnectionString

  # When set this will ignore global environment variables
  - name: ignoreEnvs
    displayName: Ignore environment variables if any matching are found
    type: boolean
    default: false

  # Name of underlying task to set connection variables from service connection
  - name: connectionTaskName
    displayName: Name of task which sets connection details
    type: string
    default: powerPlatformSetConnectionVariables

  # ----- Optional predefined parameters -----

  # Type of service connection
  - name: serviceConnectionType
    displayName: Service connection type
    type: string
    values:
      - PowerPlatformSPN
      - PowerPlatformEnvironment
    default: PowerPlatformSPN

steps:
  # Prepare environment url to be set
  - task: PowerShell@2
    displayName: Prepare power platform environment url
    inputs:
      targetType: 'inline'
      script: |
        $Debug = $env:Debug
        $EnvironmentUrlParameter = "$($env:EnvironmentUrlParameter)"
        $EnvironmentUrlBuildTools = "$($env:BuildTools.EnvironmentUrl)"
        $EnvironmentUrlPowerPlatform = "$($env:PowerPlatformUrl)"

        if ($Debug -eq $True) {
          Write-Host "##[debug]EnvironmentUrlParameter=$EnvironmentUrlParameter"
          Write-Host "##[debug]EnvironmentUrlBuildTools=$EnvironmentUrlBuildTools"
          Write-Host "##[debug]EnvironmentUrlPowerPlatform=$EnvironmentUrlPowerPlatform"
        }

        $EnvironmentUrl = "$EnvironmentUrlParameter"
        if ($EnvironmentUrl -eq "") {
          if ($EnvironmentUrlBuildTools -ne "") {
            $EnvironmentUrl = $EnvironmentUrlBuildTools
          } elseif ($EnvironmentUrlPowerPlatform -ne "") {
            $EnvironmentUrl = $EnvironmentUrlPowerPlatform
          }
        }

        Write-Host "##[debug]Using environment: $EnvironmentUrl"
        Write-Host "##vso[task.setvariable variable=BuildTools.EnvironmentUrl]$EnvironmentUrl"
    env:
      Debug: $(System.Debug)
      EnvironmentUrlParameter: ${{ parameters.url }}
      PowerPlatformUrl: $(PowerPlatformUrl)

  # Extract connection details from service connection
  - task: PowerPlatformSetConnectionVariables@2.0.52
    name: ${{ parameters.connectionTaskName }}
    displayName: Prepare connection details
    inputs:
      authenticationType: ${{ parameters.serviceConnectionType }}
      ${{ if eq(parameters.serviceConnectionType, 'PowerPlatformEnvironment') }}:
        PowerPlatformEnvironment: ${{ parameters.serviceConnection }}
        ApplicationId: $(PowerPlatformApplicationId)
        RedirectUri: $(PowerPlatformRedirectUri)
      ${{ else }}:
        PowerPlatformSPN: ${{ parameters.serviceConnection }}

  # Map connection string to output variable
  - task: PowerShell@2
    displayName: Map connection string
    inputs:
      targetType: 'inline'
      script: |
        $Debug = $env:Debug
        $PowerPlatformConnectionString = $env:PowerPlatformConnectionString
        $OutputVariableName = $env:OutputVariableName
        $ServiceConnectionType = $env:ServiceConnectionType

        if ($Debug -eq $True) {
          Write-Host "##[debug]OutputVariableName=$OutputVariableName"
        }

        if ($ServiceConnectionType -eq "PowerPlatformEnvironment") {
          Write-Host "##[debug]Replacing url in connection string"
          $PowerPlatformConnectionString = $PowerPlatformConnectionString -replace 'url=undefined', "url=$PowerPlatformUrl"
        }

        if ($Debug -eq $True) {
          $PowerPlatformConnectionString -split ";"
        }

        Write-Host "##vso[task.setvariable variable=$OutputVariableName;issecret=true;isreadonly=true]$PowerPlatformConnectionString"
    env:
      Debug: $(System.Debug)
      PowerPlatformConnectionString: $(${{ parameters.connectionTaskName }}.BuildTools.DataverseConnectionString)
      OutputVariableName: ${{ parameters.outputVariableName }}
      ServiceConnectionType: ${{ parameters.serviceConnectionType }}
      PowerPlatformUrl: $(PowerPlatformUrl)