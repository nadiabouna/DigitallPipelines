# Prepare solutions from repository

parameters:
  # ----- Required parameters -----

  # Solution list. Comma separated list that should be set at compile time
  - name: solutionList
    displayName: Comma separated list of solutions
    type: string

  # Environment to deploy to
  # Friendly name will be used to find variable groups and environments
  # Unique Name will be used to find config files (e.g. filename.myenvironment.json)
  # Example:
  #   friendlyName: My Environment
  #   uniqueName: myenvironment
  - name: environment
    displayName: Environment
    type: object

  # ----- Optional feature parameters -----

  # Name of triggering pipeline containing solution code and deployment settings artifact
  - name: triggerPipeline
    displayName: Name of triggering pipeline containing solution code and deployment settings artifact
    type: string
    default: ''

  # ----- Optional predefined parameters -----

  # Path to solutions folder
  - name: solutionFolder
    displayName: Solution folder
    type: string
    default: '$(Build.Repository.LocalPath)/solutions'

  # Path to deployment settings to use
  # If not set will look for following paths:
  # - $(Build.Repository.LocalPath)/deployment-settings/env-conn-settings/
  #   > 1. env-conn-settings.[environment.uniqueName].json
  #   > 2. env-conn-settings.json
  - name: deploymentSettingsPath
    displayName: Deployment settings path
    type: string
    default: ''

jobs:
  # Prepare solutions
  - job: prepare_${{ parameters.environment.uniqueName }}_solutions
    displayName: Prepare solutions ${{ parameters.environment.friendlyName }}

    variables:
      DeploymentSettingsFolder: $[ coalesce(variables['DeploymentSettingsPath'], 'parameters.solutionFolder/../deployment-settings') ]

    steps:
      # If we triggered from a pipeline use artifacts
      - ${{ if and(ne(parameters.triggerPipeline, ''), eq(variables['Build.Reason'], 'ResourceTrigger')) }}:
        # We can rely solely on artifacts no source required
        - checkout: none

        # Download solutions source code from artifact
        - task: DownloadPipelineArtifact@2
          displayName: Download solution code artifact
          inputs:
            buildType: specific
            project: $(System.TeamProjectId)
            definition: ${{ parameters.triggerPipeline }}
            specificBuildWithTriggering: true
            artifactName:  Export_Solutions_Code
            targetPath: ${{ parameters.solutionFolder }}

        # Download deployment settings from artifact
        - task: DownloadPipelineArtifact@2
          displayName: Download deployment settings
          inputs:
            buildType: specific
            project: $(System.TeamProjectId)
            definition: ${{ parameters.triggerPipeline }}
            specificBuildWithTriggering: true
            artifactName:  Export_Deployment_Settings
            targetPath: $(DeploymentSettingsFolder)

      # Prepare each solution
      - ${{ each solution in split(parameters.solutionList, ',') }}:
        # Use dotnet 8
        - task: UseDotNet@2
          displayName: Prepare dotnet version
          inputs:
            version: 8.x

        # Build solution project
        - task: DotNetCoreCLI@2
          displayName: '${{ solution }}: Build solution'
          inputs:
            command: build
            projects: ${{ parameters.solutionFolder }}/${{ solution }}/${{ solution }}.cdsproj
            workingDirectory: ${{ parameters.solutionFolder }}/${{ solution }}

            # Use release configuration for managed solutions
            # Assume managed unless explicitly stated otherwise
            ${{ if ne(variables[format('SolutionConfig_{0}_ImportManaged', solution)], 'false') }}:
              arguments: '--configuration Release'

        # Move solution output to artifact folder
        - task: CopyFiles@2
          displayName: '${{ solution }}: Copy solution to artifact folder'
          inputs:
            Contents: '**'
            TargetFolder: $(Build.ArtifactStagingDirectory)

            # Output directory depends on build configuration (redirecting output on build did not work)
            # Assume managed unless explicitly stated otherwise
            ${{ if ne(variables[format('SolutionConfig_{0}_ImportManaged', solution)], 'false') }}:
              SourceFolder: ${{ parameters.solutionFolder }}/${{ solution }}/bin/Release
            ${{ else }}:
              SourceFolder: ${{ parameters.solutionFolder }}/${{ solution }}/bin/Debug

      # Search and copy deployment settings if exists
      - task: PowerShell@2
        displayName: 'Try copy deployment settings'
        inputs:
          targetType: 'inline'
          script: |
            $Debug = $env:Debug
            $DeploymentSettingsPath = $env:DeploymentSettingsPath
            $DeploymentSettingsFolder = $env:DeploymentSettingsFolder
            $EnvironmentUniqueName = $env:EnvironmentUniqueName

            if ($Debug -eq $True) {
              Write-Host "##[debug]DeploymentSettingsPath=$DeploymentSettingsPath"
              Write-Host "##[debug]DeploymentSettingsFolder=$DeploymentSettingsFolder"
              Write-Host "##[debug]EnvironmentUniqueName=$EnvironmentUniqueName"
            }

            if ("$DeploymentSettingsPath" -ne "") {
              Write-Host "##[debug]Using explicit deployment settings path $DeploymentSettingsPath"
            } else {
              $DeploymentSettingsPath = "$DeploymentSettingsFolder/env-conn-settings/env-conn-settings.$EnvironmentUniqueName.json"
              Write-Host "##[debug]Deployment settings path is not set, trying environment default $DeploymentSettingsPath"

              if (Test-Path -Path "$DeploymentSettingsPath") {
                Write-Host "##[debug]Found deployment settings at $DeploymentSettingsPath"
              } else {
                $DeploymentSettingsPath = "$DeploymentSettingsFolder/env-conn-settings/env-conn-settings.json"
                Write-Host "##[debug]Deployment settings do not exist on environment level. Trying general default $DeploymentSettingsPath"

                if (Test-Path -Path "$DeploymentSettingsPath") {
                  Write-Host "##[debug]Found deployment settings at $DeploymentSettingsPath"
                } else {
                  Write-Host "##[warning]No deployment settings found"
                  return
                }
              }
            }

            Write-Host "##[debug]Copying deployment settings from $DeploymentSettingsPath to $(Build.ArtifactStagingDirectory)"
            Copy-Item -Path "$DeploymentSettingsPath" -Destination "$(Build.ArtifactStagingDirectory)/env-conn-settings.json"
        env:
          Debug: $(System.Debug)
          DeploymentSettingsPath: ${{ parameters.deploymentSettingsPath }}
          DeploymentSettingsFolder: $(DeploymentSettingsFolder)
          EnvironmentUniqueName: ${{ parameters.environment.uniqueName }}

      # Publish solutions as artifact
      - task: PublishPipelineArtifact@1
        displayName: 'Publish solutions as artifact'
        inputs:
          artifactName: ${{ parameters.environment.uniqueName }}_Solutions
          targetPath: $(Build.ArtifactStagingDirectory)