# Generate model from config file to specified folder and verify build/tests
#
# Prerequisites:
# - dgtp tooling installed (e.g. ../dgtp/install*.yml)
# - dgtp connection string 'dgtp:xrm:connection' available
# - config file available

parameters:
  # ----- Required parameters -----

  # Path to folder where model should be generated
  # - Generated model will be in subpath Model/DotNet
  - name: folder
    displayName: Folder where model should be generated to
    type: string

  # Path to model.json file holding configuration which models to generate
  - name: config
    displayName: Path to model config file
    type: string

  # The path to the csproj or sln file(s) to use
  # You can use wildcards (e.g. **/*.csproj for all .csproj files in all subfolders)
  - name: projects
    displayName: Path to project(s) or solution(s)
    type: string

  # The path to the csproj or sln file(s) to use
  # You can use wildcards (e.g. **/*.csproj for all .csproj files in all subfolders)
  - name: tests
    displayName: Path to project(s) or solution(s)
    type: string

steps:
  # Generate model
  - task: PowerShell@2
    name: generateModel
    displayName: Generate Model
    inputs:
      targetType: inline
      script: |
        $Debug = $env:Debug
        $ModelConfigFilePath = $env:ModelConfigFilePath
        $ModelFolderPath = $env:ModelFolderPathh

        if ($Debug -eq $True) {
          Write-Host "##[debug]ModelConfigFilePath=$ModelConfigFilePath"
          Write-Host "##[debug]ModelFolderPath=$ModelFolderPath"
        }

        dgtp codegeneration "$ModelFolderPath" --config "$ModelConfigFilePath"
    env:
      Debug: $(System.Debug)
      dgtp:xrm:connection: $(dgtp:xrm:connection)
      ModelConfigFilePath: ${{ parameters.config }}
      ModelFolderPath: ${{ parameters.folder }}

  # Use dotnet 8
  - task: UseDotNet@2
    displayName: Prepare dotnet version
    inputs:
      version: 8.x

  # Build projects
  - task: DotNetCoreCLI@2
    displayName: Build project(s)
    inputs:
      command: build
      projects: ${{ parameters.projects }}
      workingDirectory: $(Build.Repository.LocalPath)

  # Test projects
  - task: DotNetCoreCLI@2
    displayName: Test project(s)
    inputs:
      command: test
      projects: ${{ parameters.tests }}
      workingDirectory: $(Build.Repository.LocalPath)

  # Stage, commit and push changes
  - template: ../git/quick-commit-push.yml
    parameters:
      commitMessage: "Updated model"
      branch: $(Build.SourceBranch)