# Import or upgrade solution concept

parameters:
  # ----- Required parameters -----

  # Environment to deploy to
  # Friendly name will be used to find variable groups and environments
  # Unique Name will be used to find config files (e.g. filename.myenvironment.json)
  # Example:
  #   friendlyName: My Environment
  #   uniqueName: myenvironment
  - name: environment
    displayName: Environment
    type: object

  # Service connection to the target environment
  - name: serviceConnection
    displayName: Service Connection
    type: string

  # ----- Optional predefined parameters -----

  # Type of service connection
  - name: serviceConnectionType
    displayName: Service connection type
    type: string
    values:
      - PowerPlatformSPN
      - PowerPlatformEnvironment
    default: PowerPlatformSPN

stages:
  # Prepare solution concept
  - stage: prepare_solution_concept
    displayName: Prepare solution concept

    variables:
      ArtifactName: ${{ parameters.environment.uniqueName }}_Solutions

    jobs:
      # Download solution concept artifact
      - template: ../dgt-solution-concept/download-solution-concept-artifact-job.yml
        parameters:
          jobName: downloadSolutionConcept
          artifactName: $(ArtifactName)

      # Download installed solution list
      - template: ../pp-solution-version/generate-installed-solution-list-job.yml
        parameters:
          serviceConnection: ${{ parameters.serviceConnection }}
          serviceConnectionType: ${{ parameters.serviceConnectionType }}
          jobName: generateInstalledSolutionList

      # Extract and compare solution concept version
      - job: extract_solution_concept_versions
        displayName: Extract and compare solution concept versions

        dependsOn:
          - downloadSolutionConcept
          - generateInstalledSolutionList

        steps:
          # No sources required
          - checkout: none

          # Download solution concept artifact
          - download: current
            artifact: $(ArtifactName)

          # Install Power Platform CLI
          - template: ../pac/install.yml
            parameters:
              addToPath: false

          # Unpack solution concept artifact
          - task: PowerPlatformUnpackSolution@2
            inputs:
              SolutionInputFile: $(Pipeline.Workspace)/$(ArtifactName)/DigitallSolutions.zip
              SolutionTargetFolder: $(Pipeline.Workspace)/$(ArtifactName)
              SolutionType: Managed

          # Extract solution concept version
          - template: ../pp-solution-version/extract-version-from-solution-xml.yml
            parameters:
              filePath: $(Pipeline.Workspace)/$(ArtifactName)/Other/Solution.xml
              extractLocalVersionTaskName: getSolutionVersion

          # Save solution concept version as file
          - task: PowerShell@2
            displayName: Save solution concept version
            inputs:
              targetType: 'inline'
              script: |
                $Debug = $env:Debug
                $SolutionUniqueName = $env:SolutionUniqueName
                $SolutionVersion = $env:SolutionVersion
                $OutputFile = $env:OutputFile

                if ($Debug -eq $True) {
                  Write-Host "SolutionUniqueName=$SolutionUniqueName"
                  Write-Host "SolutionVersion=$SolutionVersion"
                  Write-Host "OutputFile=$OutputFile"
                }

                $SolutionInfoFile = @{
                  Results = @(
                    @{
                      SolutionUniqueName = $SolutionUniqueName
                      VersionNumber = $SolutionVersion
                    }
                  )
                }

                $SolutionInfoFile | ConvertTo-Json | Out-File -FilePath $OutputFile
            env:
              Debug: $(System.Debug)
              SolutionUniqueName: $(getSolutionVersion.SolutionUniqueName)
              SolutionVersion: $(getSolutionVersion.SolutionVersion)
              OutputFile: $(Build.ArtifactStagingDirectory)/local-solutions.json

          # Publish solution list as artifact
          - task: PublishPipelineArtifact@1
            displayName: Publish local solution list
            inputs:
              artifactName: ${{ parameters.environment.uniqueName }}_SolutionList_Local
              targetPath: $(Build.ArtifactStagingDirectory)/local-solutions.json

          # Download installed solution artifact
          - download: current
            artifact: installed-solution-list

          # Compare solution concept version
          - template: ../pp-solution-version/compare-solution-version.yml
            parameters:
              solution: DigitallSolutions
              sourceSolutionsPath: $(Build.ArtifactStagingDirectory)/local-solutions.json
              targetSolutionsPath: $(Pipeline.Workspace)/installed-solution-list/installed-solutions.json

          # Expose is up to date to next stage
          - task: PowerShell@2
            name: compareSolutionConceptVersion
            displayName: Expose is up to date
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "IsUpToDate=$(compareSolutionVersions_DigitallSolutions.SolutionConfig_DigitallSolutions_IsUpToDate)"
                Write-Host "##vso[task.setvariable variable=IsUpToDate;isoutput=true]$(compareSolutionVersions_DigitallSolutions.SolutionConfig_DigitallSolutions_IsUpToDate)"

  # Deployment stage
  - stage:
    displayName: Upgrade solution concept

    dependsOn: prepare_solution_concept
    condition: and(succeeded(), ne(dependencies.prepare_solution_concept.outputs['extract_solution_concept_versions.compareSolutionConceptVersion.IsUpToDate'], 'true'))

    jobs:
      # Import solution concept
      - template: ../pp-solution-import/import-deployment.yml
        parameters:
          solutionList: DigitallSolutions
          solutionListReverse: DigitallSolutions
          environment: ${{ parameters.environment }}
          serviceConnection: ${{ parameters.serviceConnection }}
          serviceConnectionType: ${{ parameters.serviceConnectionType }}
          ${{ if ne(parameters.environment.devOpsEnvironment, '') }}:
            devOpsEnvironment: ${{ parameters.environment.devOpsEnvironment }}
          ${{ else }}:
            devOpsEnvironment: Power Platform Environment ${{ parameters.environment.friendlyName }}