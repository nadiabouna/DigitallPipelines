# Part 00 of test scenario "Rollback first import"
# Delete solutions on the test environment if they are installed

# No automated trigger
trigger: none

resources:
  repositories:
    - repository: pipelinetemplates
      type: github
      name: DIGITALLNature/DigitallPipelines
      endpoint: "(TEST CI) DIGITALL Pipelines Test"

pool:
  vmImage: ubuntu-latest

variables:
  - group: "(TEST CI) Test Solution Url"
  - template: ../deployment-settings/solution-configuration/solution-configuration.yml

steps:
  # Install Power Platform CLI and create auth profile
  - template: azure-pipeline-templates/pac/install.yml@pipelinetemplates
  - template: azure-pipeline-templates/pac-auth/create-from-service-connection.yml@pipelinetemplates
    parameters:
      serviceConnection: "(TEST CI) Test Solution Conn"

  # Load installed solution versions
  - template: azure-pipeline-templates/pp-solution-version/generate-installed-solution-list.yml@pipelinetemplates
    parameters:
      outputDirectory: $(Build.ArtifactStagingDirectory)

  # Go through all solutions
  - ${{ each solution in split(variables.SolutionConfigListReverse, ',') }}:

    # Compare with empty local list (only interested if installed exists)
    - template: azure-pipeline-templates/pp-solution-version/compare-solution-version.yml@pipelinetemplates
      parameters:
        solution: ${{ solution }}
        sourceSolutionsPath: $(Build.Repository.LocalPath)/azure-pipeline-tests/pp-solution-import-rollback-first/deployment-settings/local-solutions.json
        targetSolutionsPath: $(Build.ArtifactStagingDirectory)/installed-solutions.json

    # Uninstall solution if exists
    - task: PowerPlatformDeleteSolution@2
      displayName: Uninstall solution ${{ solution }}
      condition: and(succeeded(), ne(variables['compareSolutionVersions_${{ solution }}.SolutionConfig_${{ solution }}_TargetVersion'], ''))
      inputs:
        authenticationType: PowerPlatformSPN
        PowerPlatformSPN: (TEST CI) Test Solution Conn
        SolutionName: ${{ solution }}
        Environment: $(PowerPlatformUrl)
