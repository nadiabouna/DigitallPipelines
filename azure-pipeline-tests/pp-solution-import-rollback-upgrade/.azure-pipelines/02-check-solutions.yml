# Part 02 of test scenario "No rollback solution upgrade"
# Checks whether the expected solution versions are installed

# No automated trigger; pipeline trigger is used
trigger: none

resources:
  repositories:
    - repository: pipelinetemplates
      type: github
      name: DIGITALLNature/DigitallPipelines
      endpoint: "(TEST CI) DIGITALL Pipelines Test"

  pipelines:
    - pipeline: import
      source: (TEST CI) 01 No rollback solution upgrade - import
      trigger: true

pool:
  vmImage: ubuntu-latest

variables:
  - group: "(TEST CI) Test Solution Url"

steps:
  # Install Power Platform CLI and create auth profile
  - template: azure-pipeline-templates/pac/install.yml@pipelinetemplates
  - template: azure-pipeline-templates/pac-auth/create-from-service-connection.yml@pipelinetemplates
    parameters:
      serviceConnection: "(TEST CI) Test Solution Conn"

  # Load installed solution versions
  - template: azure-pipeline-templates/pp-solution-version/generate-installed-solution-list.yml@pipelinetemplates
    parameters:
      outputDirectory: $(Agent.TempDirectory)

  # Check specific solution versions
  - task: PowerShell@2
    displayName: "Check specific solution versions"
    inputs:
      targetType: 'inline'
      script: |
        $InstalledSolutionsPath = "$env:InstalledSolutionsPath"

        Write-Host "##[debug]Parse installed solution versions"
        $InstalledSolutionsJson = Get-Content -Path $InstalledSolutionsPath -Raw
        if ($env:Debug -eq $True) { Write-Host "##[debug]InstalledSolutionsJson=$InstalledSolutionsJson" }
        $InstalledSolutionsResponse = $InstalledSolutionsJson | ConvertFrom-Json
        $InstalledSolutions =  $InstalledSolutionsResponse.Results

        Write-Host "##[debug]Get solution version for rollback_upgraded"
        $UpgradedSolution = $InstalledSolutions | Where-Object { $_.SolutionUniqueName -eq "rollback_upgraded" }
        if ($UpgradedSolution -eq $null -or "$($UpgradedSolution.VersionNumber)" -ne "2.0.0.0") {
          throw "Solution rollback_upgraded should be installed with version 2.0.0.0 but is $($UpgradedSolution.VersionNumber)"
        }

        Write-Host "##[debug]Get solution version for rollback_upgraded_Upgrade"
        $UpgradeSolution = $InstalledSolutions | Where-Object { $_.SolutionUniqueName -eq "rollback_upgraded_Upgrade" }
        if ($UpgradeSolution -ne $null) {
          throw "Solution rollback_upgraded_Upgrade should not be installed"
        }

        Write-Host "##[debug]Get solution version for rollback_upgrade_fail"
        $TestFailVersion = $InstalledSolutions | Where-Object { $_.SolutionUniqueName -eq "rollback_upgrade_fail" }
        if ($TestFailVersion -eq $null -or "$($TestFailVersion.VersionNumber)" -ne "1.0.0.0") {
          throw "Solution rollback_upgrade_fail should be installed with version 1.0.0.0 but is $($TestFailVersion.VersionNumber)"
        }
    env:
      InstalledSolutionsPath: $(Agent.TempDirectory)/installed-solutions.json
      Debug: $(System.Debug)